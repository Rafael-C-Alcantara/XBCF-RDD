share.imp <- share.imp[complete.cases(share.imp),]
summary(aggregate(shares~nit+year,share.imp,sum))
gc()
index.imp <- share.imp %>%
group_by(nit,year) %>%
mutate(index = shares*indice_cambio_real) %>%
summarise(index=sum(index)) %>%
ungroup()
gc()
rm(er,exports,imports)
share.imp  <- share.imp[,names(share.imp)!="indice_cambio_real"]
gc()
shocks <- read.dta13("C:/Users/rafae/Downloads/Editor/cje_regs.dta")
index.imp <- merge(index.imp,shocks[shocks$nit %in% index.imp$nit,])
gc()
share.imp <- merge(share.imp,shocks[shocks$nit %in% share.imp$nit,c("nit","pais","sic2","year")])
gc()
foreign::write.dta(index.imp, "C:/Users/rafae/Downloads/Editor/shocks.dta")
foreign::write.dta(share.imp, "C:/Users/rafae/Downloads/Editor/shares.dta")
gc()
library(dplyr)
library(readstata13)
imports <- read.dta13("C:/Users/rafae/Downloads/ssiv/import_res(2).dta",
select.cols = c("ano","sic2","nit", "fob_dol_import","pais_import"))
imports <- imports[complete.cases(imports),]
exports <- read.dta13("C:/Users/rafae/Downloads/Editor/ResumoExportacoes.dta")
exports <- exports[complete.cases(exports),]
exports <- exports %>%
group_by(ano,nit,pais,sic2) %>%
summarise(fob_dol=sum(fob_dol)) %>%
ungroup()
er      <- read.dta13("C:/Users/rafae/Downloads/Editor/er.dta")
er <- er[complete.cases(er),]
imp <- exports[exports$nit %in% imports$nit == T,]
imp <- imp %>%
group_by(nit,sic2) %>%
summarise(count=n()) %>%
ungroup() %>%
select(-count)
imports <- imports %>%
group_by(nit,pais_import) %>%
filter(ano==min(ano)) %>%
summarise(fob_dol_import=sum(fob_dol_import)) %>%
ungroup()
foreign::read.dta("C:/Users/rafae/Downloads/Editor/shares.dta")
shares <- foreign::read.dta("C:/Users/rafae/Downloads/Editor/shares.dta")
head(shares)
summary(aggregate(shares~nit+pais+sic2+year,data=shares,sum))
shares <- foreign::read.dta("C:/Users/rafae/Downloads/Editor/shares.dta")
summary(aggregate(shares~nit+pais+sic2+year,data=shares,sum))
install.packages(devtools)
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
library(devtools)
library(devtools)
library(ddevtools)
library(devtools)
install.packages("cli")
install.packages("cli")
install.packages("cli")
install.packages("cli")
library(devtools)
set.seed(000)
dgp <- function(n,p,cutoff,covs,lBound,uBound,p1=NA) {
w <- matrix(rnorm(n*p),nrow=n,ncol=p)
if (covs=="all") {
x   <- rnorm(n,rowMeans(w)-cutoff,10)
z   <- x>=0
mu0 <- function(x,w,p) lBound + x + w%*%1:p/10
mu1 <- function(x,w,p) uBound + 2*x + w%*%3:(p+2)/10
y0  <- rnorm(n,mu0(x,w,p),1)
y1  <- rnorm(n,mu1(x,w,p),1)
y   <- y1*z + y0*(!z)
return(list(y=y,mu0=mu0(x,w,p),mu1=mu1(x,w,p),x=x,z=z,w=w))
}
if (covs=="partial") {
w1 <-  matrix(rnorm(n*p1),nrow=n,ncol=p1)
x  <- rnorm(n,rowMeans(w)+rowMeans(w1)-cutoff,10)
z  <- x>=0
mu0 <- function(x,w,p) lBound + x + w%*%1:p/10
mu1 <- function(x,w,p) uBound + 2*x + w%*%3:(p+2)/10
y0  <- rnorm(n,mu0(x,w,p),1)
y1  <- rnorm(n,mu1(x,w,p),1)
y   <- y1*z + y0*(!z)
return(list(y=y,mu0=mu0(x,w,p),mu1=mu1(x,w,p),x=x,z=z,w=w))
}
}
n <- 200
p <- 5
c <- 2
l <- 5
u <- 10
p1 <- 5
data1 <- dgp(n,p,c,"all",5,10)
data2 <- dgp(n,p,c,"partial",5,10,p1)
plot(data1$x,data1$y)
matlines(data1$x[order(data1$x)],cbind(data1$mu0,data1$mu1)[order(data1$x),])
matlines(data1$x[order(data1$x)],cbind(data1$mu0,data1$mu1)[order(data1$x),],lty=1,col="black")
plot(data1$x,data1$y)
matlines(data1$x[order(data1$x)],cbind(data1$mu0,data1$mu1)[order(data1$x),],lty=1,col="black")
dgp <- function(n,p,cutoff,covs,lBound,uBound,p1=NA) {
w <- matrix(rnorm(n*p),nrow=n,ncol=p)
if (covs=="all") {
x   <- rnorm(n,rowMeans(w)-cutoff,10)
z   <- x>=0
mu0 <- function(x) lBound + x
mu1 <- function(x) uBound + 2*x
y0  <- rnorm(n,mu0(x),1)
y1  <- rnorm(n,mu1(x),1)
y   <- y1*z + y0*(!z)
return(list(y=y,mu0=mu0(x),mu1=mu1(x),x=x,z=z,w=w))
}
if (covs=="partial") {
w1 <-  matrix(rnorm(n*p1),nrow=n,ncol=p1)
x  <- rnorm(n,rowMeans(w)+rowMeans(w1)-cutoff,10)
z  <- x>=0
mu0 <- function(x,w,p) lBound + x
mu1 <- function(x,w,p) uBound + 2*x
y0  <- rnorm(n,mu0(x),1)
y1  <- rnorm(n,mu1(x),1)
y   <- y1*z + y0*(!z)
return(list(y=y,mu0=mu0(x),mu1=mu1(x),x=x,z=z,w=w))
}
}
n <- 200
p <- 5
c <- 2
l <- 5
u <- 10
p1 <- 5
data1 <- dgp(n,p,c,"all",5,10)
data2 <- dgp(n,p,c,"partial",5,10,p1)
plot(data1$x,data1$y)
plot(data1$w[,1],data1$y)
plot(data1$w[,2],data1$y)
plot(data1$w[,3],data1$y)
plot(data1$w[,4],data1$y)
dgp <- function(n,p,cutoff,covs,lBound,uBound,p1=NA) {
w <- matrix(rnorm(n*p,0,10),nrow=n,ncol=p)
if (covs=="all") {
x   <- rnorm(n,rowMeans(w)-cutoff,10)
z   <- x>=0
mu0 <- function(x) lBound + x
mu1 <- function(x) uBound + 2*x
y0  <- rnorm(n,mu0(x),1)
y1  <- rnorm(n,mu1(x),1)
y   <- y1*z + y0*(!z)
return(list(y=y,mu0=mu0(x),mu1=mu1(x),x=x,z=z,w=w))
}
if (covs=="partial") {
w1 <-  matrix(rnorm(n*p1,0,10),nrow=n,ncol=p1)
x  <- rnorm(n,rowMeans(w)+rowMeans(w1)-cutoff,10)
z  <- x>=0
mu0 <- function(x,w,p) lBound + x
mu1 <- function(x,w,p) uBound + 2*x
y0  <- rnorm(n,mu0(x),1)
y1  <- rnorm(n,mu1(x),1)
y   <- y1*z + y0*(!z)
return(list(y=y,mu0=mu0(x),mu1=mu1(x),x=x,z=z,w=w))
}
}
data1 <- dgp(n,p,c,"all",5,10)
data2 <- dgp(n,p,c,"partial",5,10,p1)
plot(data1$w[,1],data1$y)
plot(data1$w[,2],data1$y)
hist(rnorm(100)+rnorm(100,10,1))
hist(rnorm(100)+rnorm(100,2,1))
hist(rnorm(100)+rnorm(100,3,1))
hist(rnorm(100,0,1)+rnorm(100,3,1))
hist(rnorm(100,-1,1)+rnorm(100,3,1))
hist(rnorm(100,-10,1)+rnorm(100,3,1))
hist(rnorm(100,-10,1)+rnorm(100,30,1))
hist(rnorm(100,-10,1)+rnorm(100,10,1))
hist(.7*rnorm(100,-10,1)+.3*rnorm(100,10,1))
hist(.7*rnorm(1000,-10,1)+.3*rnorm(1000,10,1))
hist(.5*rnorm(1000,-10,1)+.5*rnorm(1000,10,1))
hist(.5*rnorm(1000,-1,1)+.5*rnorm(1000,1,1))
hist(runif(1000)<.5)*rnorm(1000,-1,1)+(runif(1000)>.5)*rnorm(1000,1,1))
hist((runif(1000)<.5)*rnorm(1000,-1,1)+(runif(1000)>.5)*rnorm(1000,1,1))
p <- runif(n)
hist((p<.5)*rnorm(n,-1,1)+(p>.5)*rnorm(n,1,1))
hist((p<.5)*rnorm(n,-1,.25)+(p>.5)*rnorm(n,1,.25))
hist((p<.5)*rnorm(n,-10,1)+(p>.5)*rnorm(n,10,1))
hist((p<.5)*rnorm(n,-10,10)+(p>.5)*rnorm(n,10,10))
hist((p<.5)*rnorm(n,-10,100)+(p>.5)*rnorm(n,10,100))
library(devtools)
library(usethis)
library(devtools)
usethis::edit_r_makevars()
install_github("JingyuHe/XBART@XBCF-RDD")
usethis::edit_r_makevars()
install_github("JingyuHe/XBART@XBCF-RDD")
usethis::edit_r_makevars()
install_github("JingyuHe/XBART@XBCF-RDD")
usethis::edit_r_makevars()
usethis::edit_r_makevars()
rm(list=ls())
n <- 500
p <- 10
c <- 0
s <- 1000 # samples
if (Sys.info()["sysname"] == "Linux")
{
setwd("~/Documents/Git/XBCF-RDD/")
source("R/simulations_xbcf.R")
gc()
source("R/simulations_kr.R")
gc()
source("R/simulations_fh.R")
gc()
} else
{
setwd("~/Git/XBCF-RDD/")
source("R/simulations_cgs.R")
gc()
}
rm(list=ls())
n <- 500
p <- 10
c <- 0
s <- 1000 # samples
if (Sys.info()["sysname"] == "Linux")
{
setwd("~/Documents/Git/XBCF-RDD/")
source("R/simulations_xbcf.R")
gc()
source("R/simulations_kr.R")
gc()
source("R/simulations_fh.R")
gc()
} else
{
setwd("~/Git/XBCF-RDD/")
source("R/simulations_cgs.R")
gc()
}
rm(list=ls())
n <- 500
p <- 10
c <- 0
s <- 1000 # samples
if (Sys.info()["sysname"] == "Linux")
{
setwd("~/Documents/Git/XBCF-RDD/")
source("R/simulations_xbcf.R")
gc()
source("R/simulations_kr.R")
gc()
source("R/simulations_fh.R")
gc()
} else
{
setwd("~/Git/XBCF-RDD/")
source("R/simulations_cgs.R")
gc()
}
rm(list=ls())
n <- 500
p <- 10
c <- 0
s <- 1000 # samples
if (Sys.info()["sysname"] == "Linux")
{
setwd("~/Documents/Git/XBCF-RDD/")
source("R/simulations_xbcf.R")
gc()
source("R/simulations_kr.R")
gc()
source("R/simulations_fh.R")
gc()
} else
{
setwd("~/Git/XBCF-RDD/")
source("R/simulations_cgs.R")
gc()
}
rm(list=ls())
n <- 500
p <- 10
c <- 0
s <- 1000 # samples
if (Sys.info()["sysname"] == "Linux")
{
setwd("~/Documents/Git/XBCF-RDD/")
source("R/simulations_xbcf.R")
gc()
source("R/simulations_kr.R")
gc()
source("R/simulations_fh.R")
gc()
} else
{
setwd("~/Git/XBCF-RDD/")
source("R/simulations_cgs.R")
gc()
}
rm(list=ls())
n <- 500
p <- 10
c <- 0
s <- 1000 # samples
if (Sys.info()["sysname"] == "Linux")
{
setwd("~/Documents/Git/XBCF-RDD/")
source("R/simulations_xbcf.R")
gc()
source("R/simulations_kr.R")
gc()
source("R/simulations_fh.R")
gc()
} else
{
setwd("~/Git/XBCF-RDD/")
source("R/simulations_cgs.R")
gc()
}
rm(list=ls())
n <- 500
p <- 10
c <- 0
s <- 1000 # samples
if (Sys.info()["sysname"] == "Linux")
{
setwd("~/Documents/Git/XBCF-RDD/")
source("R/simulations_xbcf.R")
gc()
source("R/simulations_kr.R")
gc()
source("R/simulations_fh.R")
gc()
} else
{
setwd("~/Git/XBCF-RDD/")
source("R/simulations_cgs.R")
gc()
}
results.cgs
mean((results.cgs[,1]-results.cgs[,4])^2)
hist(results.cgs[,1])
dim(w)
P = c(.80,.20);
results.kr <- matrix(0,s,4)
for (i in 1:s)
{
print(paste0("Simulation ",i," for KR data"))
dgp(n,p,"kr")
t0 <- Sys.time()
ate.cgs <- bayesrddest(y = y,
z = x,
W = w,
mw = rep(5,10), ## as per help file
tau = c,
p = P,
mz = mz,
mztau = mztau,
beta0_ = matrix(0,nrow=24),
lamstmean0_ = lamstmean0_,
lamstsd0_ = lamstsd0_,
d = rep(1,length(lamstsd0_)),
s2mean0_ = s2mean0_,
s2sd0_ = s2sd0_,
distribution = "gaussian",
nuval = nuval,
hetero = FALSE,
n0=burn,
m=nsamples)
ate.cgs <- c(mean(ate.cgs$atem),quantile(ate.cgs$atem,c(.025,.975)))
results.kr[i,1:3] <- ate.cgs
results.kr[i,4] <- ate
t1 <- Sys.time()
time[s+i] <- t1-t0
}
results.fh <- matrix(0,s,4)
for (i in 1:s)
{
print(paste0("Simulation ",i," for FH data"))
dgp(n,p,"fh")
t0 <- Sys.time()
ate.cgs <- bayesrddest(y = y,
z = x,
W = w,
mw = rep(5,10), ## as per help file
tau = c,
p = P,
mz = mz,
mztau = mztau,
beta0_ = matrix(0,nrow=24),
lamstmean0_ = lamstmean0_,
lamstsd0_ = lamstsd0_,
d = rep(1,length(lamstsd0_)),
s2mean0_ = s2mean0_,
s2sd0_ = s2sd0_,
distribution = "gaussian",
nuval = nuval,
hetero = FALSE,
n0=burn,
m=nsamples)
ate.cgs <- c(mean(ate.cgs$atem),quantile(ate.cgs$atem,c(.025,.975)))
results.fh[i,1:3] <- ate.cgs
results.fh[i,4] <- ate
t1 <- Sys.time()
time[2*s+i] <- t1-t0
}
results <- list(CGS=results.cgs,
FH=results.fh,
KR=results.kr)
saveRDS(results,"R/results_cgs.rds")
saveRDS(time,"R/time_cgs.rds")
lapply(results,function(x) mean((x[,1]-x[,4])^2))
lapply(results,tail)
s <- 100
n <- 500\
n <- 500
p <- 2
results
lapply(results, function(x) mean((x[,1]-x[,4])^2))
s <- 50
n <- 100
lapply(results,function(x) mean((x[,1]-x[,4])^2))
n <- 500
lapply(results,function(x) (x[,1]-x[,4])^2)
lapply(results,function(x) cumsum((x[,1]-x[,4])^2)/1:nrow(x))
do.call("cbind",lapply(results,function(x) cumsum((x[,1]-x[,4])^2)/1:nrow(x)))
mse <- do.call("cbind",lapply(results,function(x) cumsum((x[,1]-x[,4])^2)/1:nrow(x)))
matplot(mse,type="l",lty=1,col=c("red","green","blue"))
n
mse <- do.call("cbind",lapply(results,function(x) cumsum((x[,1]-x[,4])^2)/1:nrow(x)))
mse
results
results.fh
mse <- do.call("cbind",lapply(results,function(x) cumsum((x[,1]-x[,4])^2)/1:nrow(x)))
mse
matplot(mse,type="l",lty=1,col=c("red","green","blue"))
s <- 20
p <- 5
results
mse <- do.call("cbind",lapply(results,function(x) cumsum((x[,1]-x[,4])^2)/1:nrow(x)))
mse
matplot(mse,type="l",lty=1,col=c("red","green","blue"))
fh <- readRDS("Results/results_fh.rds")
fh
lapply(fh,function(x) mean((x[,1]-x[,4])^2))
lapply(fh,summary)
lapply(fh,function(x) median((x[,1]-x[,4])^2))
n
p
s
lapply(results,function(x) mean((x[,1]-x[,4])^2))
lapply(results,function(x) median((x[,1]-x[,4])^2))
cbind(do.call("rbind",lapply(fh,function(x) median((x[,1]-x[,4])^2))),do.call("rbind",lapply(fh,function(x) median((x[,1]-x[,4])^2))))
cbind(do.call("rbind",lapply(fh,function(x) mean((x[,1]-x[,4])^2))),do.call("rbind",lapply(fh,function(x) median((x[,1]-x[,4])^2))))
x
cbind(x,NULL)
class(NULL)
matrix(NULL)
"matrix" %in% class(NULL)
as.matrix(NULL)
is.null(NULL)
w
w^2
q("no")
q("no")
