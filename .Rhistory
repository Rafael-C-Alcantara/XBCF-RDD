hist(rnorm(100,-10,1)+rnorm(100,3,1))
hist(rnorm(100,-10,1)+rnorm(100,30,1))
hist(rnorm(100,-10,1)+rnorm(100,10,1))
hist(.7*rnorm(100,-10,1)+.3*rnorm(100,10,1))
hist(.7*rnorm(1000,-10,1)+.3*rnorm(1000,10,1))
hist(.5*rnorm(1000,-10,1)+.5*rnorm(1000,10,1))
hist(.5*rnorm(1000,-1,1)+.5*rnorm(1000,1,1))
hist(runif(1000)<.5)*rnorm(1000,-1,1)+(runif(1000)>.5)*rnorm(1000,1,1))
hist((runif(1000)<.5)*rnorm(1000,-1,1)+(runif(1000)>.5)*rnorm(1000,1,1))
p <- runif(n)
hist((p<.5)*rnorm(n,-1,1)+(p>.5)*rnorm(n,1,1))
hist((p<.5)*rnorm(n,-1,.25)+(p>.5)*rnorm(n,1,.25))
hist((p<.5)*rnorm(n,-10,1)+(p>.5)*rnorm(n,10,1))
hist((p<.5)*rnorm(n,-10,10)+(p>.5)*rnorm(n,10,10))
hist((p<.5)*rnorm(n,-10,100)+(p>.5)*rnorm(n,10,100))
library(devtools)
library(usethis)
library(devtools)
usethis::edit_r_makevars()
install_github("JingyuHe/XBART@XBCF-RDD")
usethis::edit_r_makevars()
install_github("JingyuHe/XBART@XBCF-RDD")
usethis::edit_r_makevars()
install_github("JingyuHe/XBART@XBCF-RDD")
usethis::edit_r_makevars()
usethis::edit_r_makevars()
rm(list=ls())
n <- 500
p <- 10
c <- 0
s <- 1000 # samples
setwd("~/Git/XBCF-RDD/")
set.seed(0)
source("R/simulations_setup.R")
burn <- 100
nsamples <- 100
time <- rep(0,4*s)
P = c(.70,.30);
mz = c(3, 3);
mztau = c(3, 2);
lamstmean0_ = rep(1,12);
lamstsd0_ = 5*rep(1,12);
s2mean0_ = .3;
s2sd0_ = 1;
nudgp = 3;
nuval = 3;
results.fh <- matrix(0,s,4)
for (i in 1:s)
{
print(paste0("Simulation ",i," for FH data"))
dgp(n,p,"fh")
t0 <- Sys.time()
ate.cgs <- bayesrddest(y = y,
z = x,
W = w,
mw = rep(5,10), ## as per help file
tau = c,
p = P,
mz = mz,
mztau = mztau,
beta0_ = matrix(0,nrow=24),
lamstmean0_ = lamstmean0_,
lamstsd0_ = lamstsd0_,
d = rep(1,length(lamstsd0_)),
s2mean0_ = s2mean0_,
s2sd0_ = s2sd0_,
distribution = "gaussian",
nuval = nuval,
hetero = FALSE,
n0=burn,
m=nsamples)
ate.cgs <- c(mean(ate.cgs$atem),quantile(ate.cgs$atem,c(.025,.975)))
results.fh[i,1:3] <- ate.cgs
results.fh[i,4] <- ate
t1 <- Sys.time()
time[3*s+i] <- t1-t0
}
mean((results.fh[,1]-results.fh[,4])^2)
results <- readRDS("Results/results_cgs.rds")
results <- list(CGS0=results$CGS0,CGS=results$CGS,FH=results.fh,KR=results$KR)
lapply(results,function(x) mean((x[,1]-x[,4])^2))
saveRDS(results,"Results/results_cgs.rds")
dgp(n,p,"cgs")
y
x
w
z
Owidth<-findOwidth(0.01)
Owidth
pred.gp <- predict.XBCFrdgp(fit.XBCFrd,NULL,x,NULL,rep(0,n))
q("no")
Owidth
pred.gp <- predict.XBCFrdgp(fit.XBCFrd,NULL,x,NULL,rep(0,n))
q("no")
Owidth
pred.gp <- predict.XBCFrdgp(fit.XBCFrd,NULL,x,NULL,rep(0,n))
Owidth
pred.gp <- predict.XBCFrdgp(fit.XBCFrd,w,x,w,rep(0,n))
Owidth
Owidth <- findOwidth(0.01)
Owidth
pred.ate.xbcf0()
Omin <- 5
Owidth <- findOwidth(0.01)
Owidth
pred.ate.xbcf0()
Omin <- 10
Owidth <- findOwidth(0.01)
Owidth
pred.ate.xbcf0()
Omin
0.6*var(y)/10
var(y)/10
Owidth
pred.ate.xbcf0()
pred.ate.xbcf0
pred.ate.xbcf0()
s <- 50
results.cgs0
mean((results.cgs0[,1]-results.cgs0[,4])^2)
mean(results.cgs0[,4] >= results.cgs0[,2] & results.cgs0[,4] <= results.cgs0[,3])
s <- 1000
q("no")
dgp(n,p,"cgs")
findOwidth(0.01)
q("no")
mse
cov.rate
int.length
q("no
")
q("no")
mapply(cutpoints,seq(0.01,0.1,0.01))
jsonlite::parse_json(fit.XBCFrd$tree_json_con)
jsonlite::parse_json(fit.XBCFrd$tree_json_con)$trees
Owidth
avail.cut
q("no")
Owidth
pred1$tau.adj
dim(pred1$tau.adj)
rowMeans(pred1$tau.adj)
summary(rowMeans(pred1$tau.adj))
summary(rowMeans(pred2$tau.adj))
Owidth <- 0.05
summary(rowMeans(pred1$tau.adj))
summary(rowMeans(pred2$tau.adj))
summary(rowMeans(pred2$tau.adj))
avail.cut
q("no")
Owidth
summary(rowMeans(pred1$tau.adj))
summary(rowMeans(pred2$tau.adj))
Owidth
avail.cut
Owidth
quantile(rowMeans(pred1$tau.adj),seq(0,1,.025))
quantile(rowMeans(pred2$tau.adj),seq(0,1,.025))
quantile(rowMeans(pred2$tau.adj),seq(0,1,.005))
Owidth
Owidth <- 0.04
lapply(results,function(x) lapply(x$pred, function(y) rowMeans(y$tau.adj)))
lapply(results,function(x) lapply(x$pred, function(y) rowMeans(y)))
lapply(results,function(x) lapply(x$pred, function(y) names(y)))
results
names(results)
names(results$v)
names(results$v$fit)
warnings()
results$v$fit
names(results$v$pred)
length(results$v$pred)
lapply(results, function(x) lapply(x$pred, function(y) rowMeans(y$pred.adj)))
lapply(results, function(x) lapply(x$pred, function(y) rowMeans(y$tau.adj)))
Owidth
lapply(lapply(results, function(x) lapply(x$pred, function(y) rowMeans(y$tau.adj))),summary)
lapply(results, function(x) lapply(x$pred, function(y) dim(y$tau.adj)))
lapply(results, function(x) lapply(x$pred, function(y) colMeans(y$tau.adj)))
q("no")
dgp1[[1]]
dgp1a[[1]]
q("no")
q("no")
q("no")
n
num_cutpoints
dgp[[1]]$ate
s <- 20
i <- 1
y
Owidth
findOwidth(0.01)
sum(x>=-0.01&x<0)
sum(x>=-0.05&x<0)
sum(x>=-0.04&x<0)
sum(x>=-0.03&x<0)
Owidth <- 0.04
q("no")
num_cutpoints
s
dgp[[1]]$ate
i <- 1
Owidth
cutpoints(0.02)
2156/(n*p)
2156/5000
cutpoints(max(x))
cutpoints(0.01)
cutpoints(0.02)
cutpoints(0)
cutpoints(0.001)
cutpoints(0.005)
cutpoints(0.002)
cutpoints(0.008)
cutpoints(0.006)
cutpoints(0.007)
cutpoints(0.009)
cutpoints(0.01)
cutpoints(0.02)
cutpoints(0.03)
2704/5000
Owidth
cupoint(0.02)/cutpoint(max(x))
cutpoint(0.02)/cutpoint(max(x))
cutpoints(0.02)/cutpoints(max(x))
cutpoints(0.03)/cutpoints(max(x))
cutpoints(max(x))/5000
max(x)
min(x)
cutpoints(-min(x))/5000
findOwidth(0.01)
pred1 <- predict.XBCFrd(fit,w,rep(0,n))
pred1 <- predict.XBCFrd(fit,w,rep(0,500))
pred2 <- predict.XBCFrd(fit1,w,rep(0,500))
summary(pred1$tau.adj.mean)
summary(pred2$tau.adj.mean)
plot(x,pred1$tau.adj.mean)
plot(x,pred1$tau.adj.mean,"l")
plot(x,pred1$tau.adj.mean[order(x)],"l")
plot(sort(x),pred1$tau.adj.mean[order(x)],"l")
plot(sort(x),pred2$tau.adj.mean[order(x)],"l")
plot(sort(x),pred1$tau.adj.mean[order(x)],"l")
x
x^2/sum(x^2)
sum(x^2/sum(x^2))
plot(x,x)
plot(x,x^2/sum(x^2))
plot(x,(1/x^2)/sum(1/x^2))
sum((1/x^2)/sum(1/x^2))
plot(x,(1/abs(x))/sum(1/abs(x)))
wts <- (1/abs(x))/sum(1/abs(x))
summary(colMeans(pred1$tau.adj))
summary(colSums(pred1$tau.adj)/500)
summary(colSums(wtspred1$tau.adj))
summary(colSums(wts*pred1$tau.adj))
summary(colMeans(pred2$tau.adj))
summary(colSums(wts*pred2$tau.adj))
wts <- (1/x^2)/sum(1/x^2)
sum(wts)
summary(colMeans(pred1$tau.adj))
summary(colSums(wts*pred1$tau.adj))
summary(colMeans(pred2$tau.adj))
summary(colSums(wts*pred2$tau.adj))
quantiles(colMeans(pred1$tau.adj),seq(0,1,.025))
quantiled(colMeans(pred1$tau.adj),seq(0,1,.025))
quantile(colMeans(pred1$tau.adj),seq(0,1,.025))
quantile(colSums(wts*pred1$tau.adj),seq(0,1,.025))
quantile(colMeans(pred2$tau.adj),seq(0,1,.025))
quantile(colSums(wts*pred2$tau.adj),seq(0,1,.025))
wts <- (1/abs(x))/sum(1/abs(x))
quantile(colMeans(pred1$tau.adj),seq(0,1,.025))
quantile(colSums(wts*pred1$tau.adj),seq(0,1,.025))
quantile(colMeans(pred2$tau.adj),seq(0,1,.025))
quantile(colSums(wts*pred2$tau.adj),seq(0,1,.025))
plot(x,wts)
wts <- (1/x^2)/sum(1/x^2)
plot(x,wts)
quantile(colMeans(pred1$tau.adj),seq(0,1,.025))
quantile(colSums(wts*pred1$tau.adj),seq(0,1,.025))
quantile(colMeans(pred2$tau.adj),seq(0,1,.025))
quantile(colSums(wts*pred2$tau.adj),seq(0,1,.025))
summary(colMeans(pred1$tau.adj))
summary(colSums(wts*pred1$tau.adj))
summary(colMeans(pred2$tau.adj))
summary(colSums(wts*pred2$tau.adj))
max(x)
min(x)
sqrt(max(x^2))
findOwidth(0.01)
findOwidth(0.01)
cutpoints(0.03)
cutpoints(0.04)
cutpoints(0.05)
cutpoints(0.06)
pred3 <- predict.XBCFrd(fit3,w,x)
summary(colMeans(pred3$tau.adj))
summary(colSums(wts*pred3$tau.adj))
summary(colSums(wts*pred2$tau.adj))
summary(colSums(wts*pred1$tau.adj))
plot(sort(x),pred3$tau.adj.mean[order(x)],"l")
pred4 <- predict.XBCFrd(fit4,w,x)
summary(colSums(wts*pred1$tau.adj))
summary(colSums(wts*pred3$tau.adj))
summary(colSums(wts*pred4$tau.adj))
quantile(colSums(wts*pred3$tau.adj),seq(0,1,0.025))
quantile(colSums(wts*pred4$tau.adj),seq(0,1,0.025))
plot(sort(x),pred4$tau.adj.mean[order(x)],"l")
findOwidth
findOwidth(0.01)
findOwidth(0.001)
findOwidth(.01)
findOwidth(.001)
q("no")
s <- 20
num_cutpoints <- 500
q("no")
s <- 20
q("no")
post1.sum
post2.sum
boxplot(cbind(post1.sum[,1],post2.sum[,2]))
boxplot(cbind(post1.sum[,1],post2.sum[,1]))
results[[1]]$Owidth
wts <- XBART.multinomial(dgp[[1]]$x>=-0.04 & dgp[[1]]$x<=0.04,num_class=2,X=dgp[[1]]$w)
wts
names(wts)
wts$yhats_train
names(wts)
predict.XBARTmultinomial(wts,dgp[[1]]$w)
wts <- predict.XBARTmultinomial(wts,dgp[[1]]$w)
cbind(as.numeric(dgp[[1]]$x>=-0.04 & dgp[[1]]$x<=0.04),wts$label)
wts$prob
wts$prob[,2]
wts <- wts$prob[,2]
plot(dgp[[1]]$x,wts)
length(pred)
pred
pred1 <- predict.XBCFrd(results[[1]]$fit,dgp[[1]]$w,rep(0,500))$pred.tau.adj
pred1
pred1 <- predict.XBCFrd(results[[1]]$fit,dgp[[1]]$w,rep(0,500))$tau.adj
pred1
post3 <- colSums(pred1)
post3
post3 <- colSums(wts*pred1)
post3
wts
pred1
pred1*wts
pred1
post3 <- colSums(wts*pred1)
post3
sum(wts*pred1[,1])
wts
pred1[,1]
1:2*3:4
cbind(wts,results[[1]]$wts)
sum(wts)
post3 <- colSums(wts*pred1/sum(wts))
post3
c(mean(post3),quantile(post3,c(0.025,0.0975)))
pred1 <- predict.XBCFrd(results[[1]]$fit,dgp[[1]]$w,rep(0,500))
names(pred1)
wts <- predict.XBARTmultinomial(wts,dgp[[1]]$w)
wts <- XBART.multinomial(dgp[[1]]$x>=-0.04 & dgp[[1]]$x<=0.04,num_class=2,X=dgp[[1]]$w)
wts <- predict.XBARTmultinomial(wts,dgp[[1]]$w)
names(wts)
wts$yhats
wts$yhats[[2]]
class(wts$yhats)
wts$yhats[,2]
wts$yhats[2]
names(wts$yhats)
wts$yhats[,2,]
wts$yhats[,,2]
colMeans(wts$yhats[,,2])
all.equal(colMeans(wts$yhats[,,2]),wts$prob[,2])
colMeans(wts$yhats[,,2])/sum(wts$prob[,2])
wts <- wts$prob[,2]
wts <- wts/sum(wts)
plot(dgp[[1]]$x,wts)
plot(dgp[[1]]$x,results[[1]]$wts)
plot(dgp[[1]]$x,wts)
wts <- sum(wts)
plot(dgp[[1]]$x,wts)
wts <- XBART.multinomial(dgp[[1]]$x>=-0.04 & dgp[[1]]$x<=0.04,num_class=2,X=dgp[[1]]$w)
wts <- predict.XBARTmultinomial(wts,dgp[[1]]$w)
wts$prob
rowSums(wts$prob)
plot(dgp[[1]]$x,wts$prob[,2])
wts
names(pred1)
colMeans(wts$label*pred1$tau.adj)
colSums(wts$label*pred1$tau.adj/sum(wts$label))
w
w <- wts$label*wts$prob[,2]
w
w <- w/sum(w)
w
colSums(w*pred1$tau.adj)
mean(colSums(w*pred1$tau.adj))
post2.sum
post1.sum
quantile(colSums(w*pred1$tau.adj),c(0.025,0.975))
w(dpg[[1]]$x,0,wts,0.5,2)
w(dgp[[1]]$x,0,wts,0.5,2)
w(dgp[[1]]$x,0,wts,0.5,2)
w(dgp[[1]]$x,0,wts,0.5,5)
plot(dgp[[1]]$x,w(dgp[[1]]$x,0,wts,0.5,2))
plot(dgp[[1]]$x,w(dgp[[1]]$x,0,wts,0.5,10))
plot(dgp[[1]]$x,w(dgp[[1]]$x,0,wts,0.5,100))
plot(dgp[[1]]$x,w(dgp[[1]]$x,0,wts,0.1,100))
plot(dgp[[1]]$x,w(dgp[[1]]$x,0,wts,0.7,100))
plot(dgp[[1]]$x,w(dgp[[1]]$x,0,wts,1,100))
plot(dgp[[1]]$x,w(dgp[[1]]$x,0,wts,2))
plot(dgp[[1]]$x,w(dgp[[1]]$x,0,wts,0.5))
plot(dgp[[1]]$x,w(dgp[[1]]$x,0,wts,0.005))
summary(1/dgp[[1]]$x^2)
summary(1/exp(dgp[[1]]$x^2))
sort(1/exp(dgp[[1]]$x^2))
summary(1/exp(dgp[[1]]$x^2))
quantile(colSums(w*pred1$tau.adj),c(0.025,0.975))
w(dgp[[1]]$x,0,wts,1)
wt <- w(dgp[[1]]$x,0,wts,1)
quantile(colSums(wt*pred1$tau.adj),c(0.025,0.975))
mean((colSums(wt*pred1$tau.adj))
)
post2.sum
wts
pred1$tau.adj*wts$label
pred1$tau.adj*wts$label/wts$prob[,2]
pred1$tau.adj*wts$label
pred1$tau.adj*wts$label/wts$prob[,2]
colMeans(pred1$tau.adj*wts$label/wts$prob[,2])
colSums(pred1$tau.adj*wts$label/(sum(wts$label)*wts$prob[,2]))
mean(colSums(pred1$tau.adj*wts$label/(sum(wts$label)*wts$prob[,2])))
quantile(colSums(pred1$tau.adj*wts$label/(sum(wts$label)*wts$prob[,2])),c(0.025,0.975))
w(pred1$tau.adj,0,wts)
w(pred1$tau.adj,0,wts)
w(pred1$tau.adj,0,wts)
colMeans(w(pred1$tau.adj,0,wts))
w(wts)
w(wts)
sum(w(wts))
mean(colSums(w(wts)*pred1$tau.adj)))
mean(colSums(w(wts)*pred1$tau.adj))
mean(colSums(pred1$tau.adj*wts$label/(sum(wts$label)*wts$prob[,2])))
quantile(colSums(w(wts)*pred1$tau.adj),c(0.025,0.975))
quantile(colSums(pred1$tau.adj*wts$label/(sum(wts$label)*wts$prob[,2])),c(0.025,0.975))
sum(wts$label)
wts$label
sum(dgp[[1]]$x>=-0.04 & dgp[[1]]$x<=0.04)
s <- 20
q("no")
i <- 5
w(wts)
q("no")
do.call("cbind",weights)
i <- 5
q("no")
i <- 5
w(wts)
q("no")
weights[[5]]
lapply(weights,sum)
post3.sum
mean((post3.sum[,1]-1)^2)
mean(post3.sum[,2]<=1 & 1<= post3.sum[,3])
mean(post3.sum[,3]-post3.sum[,2])
post2.sum
q("no")
s<-20
q("no")
weights[[1]]
weights[[1]]$prob[,2]
summary(weights[[1]]$prob[,2])
summary(weights[[2]]$prob[,2])
summary(weights[[3]]$prob[,2])
plot(weights[[3]]$prob[,2])
plot(dgp[[3]]$x,weights[[3]]$prob[,2])
post3.sum
lapply(weights,function(x) sum(x$prob[,2]>0;5))
lapply(weights,function(x) sum(x$prob[,2]>0.5))
lapply(weights,function(x) x$prob[,2])
lapply(weights,function(x) x$label)
lapply(weights,function(x) sum(x$label))
weights
weights[[1]]$prob[,2]
rbinom(1,500,weights[[1]]$prob[,2])
rbinom(500,1,weights[[1]]$prob[,2])
rbinom(500,10,weights[[1]]$prob[,2])
rbinom(500,1,weights[[1]]$prob[,2])
sapply(weights, function(x) rbinom(500,1,x$prob[,2]))
lapply(weights, function(x) rbinom(500,1,x$prob[,2]))
post3.sum
tau.sample
sapply(tau.sample,sum)
q("no")
num_cutpoints <- 500
q("no")
q("no")
